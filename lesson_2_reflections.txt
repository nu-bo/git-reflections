
"HEAD" is Git's name for the current commit

By initialising a repository you create a .git directory.
This .git directory contains metadata which tracks changes.

The Staging Area is an intermediate area between the Working Directory and the Repository.
Files can only be committed from the staging area.
It allows developers to organise files into a logical step before committing.
Needing to specify which files are added to the staging area with git add gives more control.
Use git diff --staged to see differences between files in Staging Area and most recent commit.

Branches are helpful when you want to trial out an experimental feature.
Also good for different versions e.g. languages or levels of difficulty.
Good for switching context to another area/problem.
Good to keep development branch separate from production code.
Branch diagrams help illustrate which commits are linked and which are not.
Each commit remembers its parent commit.
Some commits will be unreachable from others.

By merging two branches together you combine the changes made in each.
To determine which lines of code are kept, a comparison is made with the point at which the branches diverged.
Lines that were added are kept & lines that were deleted are discarded.
Sometimes there is a merge conflict and you will have to go through the changes manually.
The git log --graph --oneline illustrates a diagram of the two branches.
This can be used to the point at which the branches diverged and will allow identification of key commits on each branch.

Automatic git merging is handy but could cause conflicts and doesn't really know which code is best.
Manual git merging ensures the code has the desired output but is laborious.